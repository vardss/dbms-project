-- Drop existing tables if they exist
DROP TABLE IF EXISTS PAYMENTS;
DROP TABLE IF EXISTS CUSTOMERS;
DROP TABLE IF EXISTS FACILITIES;
DROP TABLE IF EXISTS ROOMS;
DROP TABLE IF EXISTS HOTEL;

-- Create HOTEL table
CREATE TABLE HOTEL (
    HID int NOT NULL PRIMARY KEY,
    NAME varchar(20),
    LOCATION varchar(20)
);

-- Create ROOMS table
CREATE TABLE ROOMS (
    Room_ID int NOT NULL PRIMARY KEY,
    Room_type varchar(20)
);

-- Create FACILITIES table
CREATE TABLE FACILITIES (
    FID int NOT NULL PRIMARY KEY,
    Facility_name varchar(20)
);

-- Create CUSTOMERS table
CREATE TABLE CUSTOMERS (
    CID int NOT NULL PRIMARY KEY,
    NAME varchar(20),
    ADDRESS varchar(20),
    PH_NO int NOT NULL,
    Room_ID int NOT NULL,
    FID int,
    CONSTRAINT fk_room FOREIGN KEY (Room_ID) REFERENCES ROOMS (Room_ID),
    CONSTRAINT fk_facility FOREIGN KEY (FID) REFERENCES FACILITIES (FID)
);

-- Create PAYMENTS table
CREATE TABLE PAYMENTS (
    PID int NOT NULL PRIMARY KEY,
    METHOD varchar(20),
    AMOUNT int,
    CID int NOT NULL,
    CONSTRAINT fk_customer FOREIGN KEY (CID) REFERENCES CUSTOMERS (CID)
);

-- Insert data into HOTEL table
INSERT INTO HOTEL VALUES (1, 'TAJ KRISHNA', 'BANJARA HILLS');

-- Insert data into ROOMS table
INSERT INTO ROOMS VALUES (1, 'SINGLE BEDROOM');
INSERT INTO ROOMS VALUES (2, 'DOUBLE BEDROOM');
INSERT INTO ROOMS VALUES (3, 'TRIPLE BEDROOM');

-- Insert data into CUSTOMERS table
INSERT INTO CUSTOMERS VALUES (1, 'MARY', 'KOCHI', 12345, 1, 1);
INSERT INTO CUSTOMERS VALUES (2, 'RADHA', 'HYD', 6789, 1, 3);
INSERT INTO CUSTOMERS VALUES (3, 'KRISH', 'WARANGAL', 98989, 2, 2);
INSERT INTO CUSTOMERS VALUES (4, 'SITA', 'HYD', 23232, 3, 3);
INSERT INTO CUSTOMERS VALUES (5, 'ALEX', 'KOCHI', 12122, 3, 3);
INSERT INTO CUSTOMERS VALUES (6, 'JOHN', 'HYD', 23122, 2, 2);

-- Insert data into FACILITIES table
INSERT INTO FACILITIES VALUES (1, 'SPA');
INSERT INTO FACILITIES VALUES (2, 'GYM');
INSERT INTO FACILITIES VALUES (3, 'POOL');

-- Insert data into PAYMENTS table
INSERT INTO PAYMENTS VALUES (1, 'CASH', 10000, 3);
INSERT INTO PAYMENTS VALUES (2, 'UPI', 20000, 1);
INSERT INTO PAYMENTS VALUES (3, 'CASH', 15000, 4);
INSERT INTO PAYMENTS VALUES (4, 'CASH', 10000, 5);
INSERT INTO PAYMENTS VALUES (5, 'CARD', 15000, 2);
INSERT INTO PAYMENTS VALUES (6, 'CARD', 10000, 6);

--sql queries

-- 1. List customers who paid using 'CASH'
SELECT C.NAME FROM CUSTOMERS C
JOIN PAYMENTS P ON C.CID = P.CID WHERE P.METHOD = 'CASH';

-- 2. List the facility names having the character set 'oo' together
SELECT FNAME FROM FACILITIES WHERE Facility_name LIKE '%OO%';

-- 3. Apply UNION operation on CUSTOMERS and ROOMS
SELECT ROOM_ID FROM CUSTOMERS UNION SELECT ROOM_ID FROM ROOMS;

-- 4. Select customers where address is 'HYD'
SELECT * FROM CUSTOMERS WHERE ADDRESS = 'HYD';

-- 5. Perform an inner join between CUSTOMERS and ROOMS
SELECT * FROM CUSTOMERS C INNER JOIN ROOMS R ON R.ROOM_ID = C.ROOM_ID;

-- 6. Count how many customers are using each facility
SELECT F.F_NAME, COUNT(*) AS NO_OF_CUSTOMERS
FROM CUSTOMERS C JOIN FACILITIES F ON C.FID = F.FID
GROUP BY F.F_NAME;

-- 7.Get all customer names and the type of room they booked
SELECT C.NAME AS CUSTOMER_NAME, R.ROOM_TYPE
FROM CUSTOMERS C JOIN ROOMS R ON C.ROOM_ID = R.ROOM_ID;

-- 8. Total amount paid by all customers
SELECT SUM(AMOUNT) AS TOTAL_REVENUE FROM PAYMENTS;

-- 9. Display customer names and the facilities they are using
SELECT C.NAME AS CUSTOMER_NAME, F.F_NAME
FROM CUSTOMERS C JOIN FACILITIES F ON C.FID = F.FID;

--10. Show all room types along with the number of customers booked in each
SELECT R.ROOM_TYPE, COUNT(*) AS BOOKED_CUSTOMERS
FROM CUSTOMERS C JOIN ROOMS R ON C.ROOM_ID = R.ROOM_ID
GROUP BY R.ROOM_TYPE;

--11. List all customers and their payment details
SELECT C.NAME, P.METHOD, P.AMOUNT
FROM CUSTOMERS C JOIN PAYMENTS P ON C.CID = P.CID;

-- 12. Show the most expensive payment
SELECT * FROM PAYMENTS
ORDER BY AMOUNT DESC
LIMIT 1;

-- 13. List customers who are using the same facility (POOL)
SELECT NAME FROM CUSTOMERS
WHERE FID = (SELECT FID FROM FACILITIES WHERE F_NAME = 'POOL');

--14. Show each payment method and total amount collected through it
SELECT METHOD, SUM(AMOUNT) AS TOTAL
FROM PAYMENTS GROUP BY METHOD;

-- 15. Display the name and payment amount of customers who paid more than â‚¹10,000
SELECT C.NAME, P.AMOUNT
FROM CUSTOMERS C JOIN PAYMENTS P ON C.CID = P.CID
WHERE P.AMOUNT > 10000;












